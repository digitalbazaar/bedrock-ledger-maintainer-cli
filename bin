#!/usr/bin/env node

/**
 * Bedrock Ledger Maintainer CLI
 * Command line interface for updating Witness Pool documents
 *
 * Copyright (C) 2021 Digital Bazaar, Inc. All Rights Reserved.
 */

const yargs = require('yargs');
const util = require('util');
const App = require('./App');

// print out unhandled errors
process.on(
  'unhandledRejection',
  error => console.error(util.inspect(error, {depth: null})));

function _setupCLIOptions() {
  return yargs
    .option('primary', {
      alias: 'p',
      describe: 'A comma separated list of primary nodes',
      default: ''
    }).option('secondary', {
      alias: 's',
      describe: 'A comma separated list of secondary nodes',
      default: ''
    }).option('maintainerKey', {
      alias: 'k',
      describe: 'A maintainer secret or a file containing ' +
        'material for a v1 key',
      default: 'password'
    }).option('keepAlive', {
      alias: 'a',
      describe: 'Whether to keep the httpsAgent agent alive',
      default: true
    }).option('rejectUnauthorized', {
      alias: 'r',
      describe: 'Whether to reject domains with invalid SSL certificates',
      default: false
    }).option('veresMode', {
      alias: 'm',
      describe: 'The mode for veres one driver',
      default: 'dev'
    }).option('maximumWitnessCount', {
      alias: 'w',
      describe: 'The maximumWitnessCount for the witnessPool',
      default: 1
    }).option('didMethod', {
      alias: 'd',
      default: 'key',
      describe: 'The type of did key to use. Either "key" or "v1"'
    });
}

_setupCLIOptions(yargs);

yargs.scriptName('blm')
  .usage('$0 <cmd> [args]')
  .command('create', 'create a witness pool doc', async ({argv}) => {
    const app = new App(argv);
    await app.setup();
    const {found} = await app.findWitnessPoolDoc();
    if(found) {
      throw new Error('Existing Witness Pool Document Found.');
    }
    return app.create();
  })
  .command('update', 'update ledger nodes', async ({argv}) => {
    const app = new App(argv);
    await app.setup();
    const {found, record} = await app.findWitnessPoolDoc();
    if(!found) {
      throw new Error('Existing Witness Pool Document Not Found.');
    }
    return app.update({existingWitnessPool: record});
  })
  .command('send', 'creates or updates a witness pool doc', async ({argv}) => {
    const app = new App(argv);
    await app.setup();
    const {found, record} = await app.findWitnessPoolDoc();
    if(!found) {
      return app.create();
    }
    return app.update({existingWitnessPool: record});
  })
  .help()
  .argv;
